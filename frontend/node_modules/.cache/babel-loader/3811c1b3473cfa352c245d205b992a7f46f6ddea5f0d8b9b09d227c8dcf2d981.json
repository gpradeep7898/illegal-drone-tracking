{"ast":null,"code":"var _jsxFileName = \"/Users/pradeepgatti/Desktop/IllegalDroneTracking/illegal-drone-tracking/frontend/src/components/DroneUpdates.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DroneUpdates = () => {\n  _s();\n  const [droneUpdates, setDroneUpdates] = useState([]);\n  const [loading, setLoading] = useState(true); // For loading state\n\n  // WebSocket connection for real-time updates\n  useEffect(() => {\n    const socket = io(`${process.env.REACT_APP_API_URL}`);\n\n    // Listen for real-time updates from the backend\n    socket.on('drone-data-update', data => {\n      setDroneUpdates(prevData => [...prevData, data]);\n    });\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n\n  // Fetch drone data from the API on component mount\n  useEffect(() => {\n    const fetchDroneData = async () => {\n      try {\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/fetch-drones`);\n        const data = await response.json();\n        if (response.ok) {\n          setDroneUpdates(data.drones); // Set initial data fetched from API\n          setLoading(false); // Stop loading once data is fetched\n        } else {\n          console.error(\"Failed to fetch drone data\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n    fetchDroneData(); // Fetch the data when the component mounts\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading drone updates...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Drone Updates\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: droneUpdates.map((update, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [update.callsign, \" (\", update.country, \") - Lat: \", update.latitude, \", Lon: \", update.longitude, \", Alt: \", update.altitude, \" meters, Vel: \", update.velocity, \" km/h\"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(DroneUpdates, \"V/I7g+ZSkjDmmtoX92bDs2VH5FU=\");\n_c = DroneUpdates;\nexport default DroneUpdates;\nvar _c;\n$RefreshReg$(_c, \"DroneUpdates\");","map":{"version":3,"names":["React","useState","useEffect","io","jsxDEV","_jsxDEV","DroneUpdates","_s","droneUpdates","setDroneUpdates","loading","setLoading","socket","process","env","REACT_APP_API_URL","on","data","prevData","disconnect","fetchDroneData","response","fetch","json","ok","drones","console","error","children","fileName","_jsxFileName","lineNumber","columnNumber","map","update","index","callsign","country","latitude","longitude","altitude","velocity","_c","$RefreshReg$"],"sources":["/Users/pradeepgatti/Desktop/IllegalDroneTracking/illegal-drone-tracking/frontend/src/components/DroneUpdates.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\n\nconst DroneUpdates = () => {\n  const [droneUpdates, setDroneUpdates] = useState([]);\n  const [loading, setLoading] = useState(true);  // For loading state\n\n  // WebSocket connection for real-time updates\n  useEffect(() => {\n    const socket = io(`${process.env.REACT_APP_API_URL}`);\n\n    // Listen for real-time updates from the backend\n    socket.on('drone-data-update', (data) => {\n      setDroneUpdates((prevData) => [...prevData, data]);\n    });\n\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n\n  // Fetch drone data from the API on component mount\n  useEffect(() => {\n    const fetchDroneData = async () => {\n      try {\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/fetch-drones`);\n        const data = await response.json();\n\n        if (response.ok) {\n          setDroneUpdates(data.drones);  // Set initial data fetched from API\n          setLoading(false);  // Stop loading once data is fetched\n        } else {\n          console.error(\"Failed to fetch drone data\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n\n    fetchDroneData();  // Fetch the data when the component mounts\n  }, []);\n\n  if (loading) {\n    return <p>Loading drone updates...</p>;\n  }\n\n  return (\n    <div>\n      <h3>Drone Updates</h3>\n      <ul>\n        {droneUpdates.map((update, index) => (\n          <li key={index}>\n            {update.callsign} ({update.country}) - Lat: {update.latitude}, Lon: {update.longitude}, Alt: {update.altitude} meters, Vel: {update.velocity} km/h\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default DroneUpdates;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}